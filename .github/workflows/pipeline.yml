name: Build, Test and Deploy

on:
  #push:
  #  branches:
  #    - master
  workflow_dispatch:

env:
  rgName: rg-fabrikamfiber-qa
  location: centralus
  appName: app-fabrikamfiber-qa
  planName: asp-fabrikamfiber
  sqlserverName: sql-fabrikamfiber
  sqldbName: db-fabrikamfiber

jobs:
  iac:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login
        uses: Azure/login@v2
        with:
          creds: ${{ secrets.ORG_AZ_CREDENTIALS }}
      
      - name: Create Resource Group
        run: |
          $rgExists = az group exists --name ${{ env.rgName }}

          if ($rgExists -eq 'true')
          {
            Write-Output "Resource group ${{ env.rgName }} already exists."
          }
          else
          {
            Write-Output "Resource group ${{ env.rgName }} does not exist. Creating..."
            az group create --name ${{ env.rgName }} --location ${{ env.location }}
          }

      - name: Create Service Plan
        run: |
          Write-Output "Service plan..."
          $planExists = az appservice plan list --resource-group ${{ env.rgName }} --query "[?name=='${{ env.planName }}'].name" --output tsv
          Write-Output "Plan Exists: $planExists"

          if ($planExists)
          {
            Write-Output "Service plan ${{ env.planName }} already exists."
          }
          else
          {
            Write-Output "Service plan ${{ env.planName }} does not exist. Creating..."
            az appservice plan create --name ${{ env.planName }} --resource-group ${{ env.rgName }} --sku B1
          }

      - name: Create Web App
        run: |
          Write-Output "Web App..."
          $webAppExists = az webapp list --resource-group ${{ env.rgName }} --query "[?name=='${{ env.appName }}'].name" --output tsv
          Write-Output "Web App Exists: $webAppExists"
          
          if ($webAppExists)
          {
            Write-Output "Web App ${{ env.appName }} already exists."
          }
          else
          {
            Write-Output "Web App ${{ env.appName }} does not exist. Creating..."
            az webapp create --name ${{ env.appName }} --plan ${{ env.planName }} --resource-group ${{ env.rgName }} --runtime "ASPNET:V4.8"
          }

      - name: Create SQL Server
        run: |
          Write-Output "Sql Server..."
          $sqlServerExists = az sql server list --resource-group ${{ env.rgName }} --query "[?name=='${{ env.sqlserverName }}'].name" --output tsv
          Write-Output "Sql Server Exists: $sqlServerExists"
          
          if ($sqlServerExists)
          {
            Write-Output "SQL Server ${{ env.sqlserverName }} already exists."
          }
          else
          {
            Write-Output "SQL Server ${{ env.sqlserverName }} does not exist. Creating..."
            az sql server create --name ${{ env.sqlserverName }} --resource-group ${{ env.rgName }} --location ${{ env.location }} --admin-user "${{ secrets.SQL_USER }}" --admin-password "${{ secrets.SQL_PASSWORD }}"
          }
      
      - name: Create SQL Server database
        run: |
          Write-Output "Sql Server Database..."
          $sqlDbExists = az sql db list --resource-group ${{ env.rgName }} --server ${{ env.sqlserverName }} --query "[?name=='${{ env.sqldbName }}'].name" --output tsv
          Write-Output "Sql Server Database Exists: $sqlDbExists"
          
          if ($sqlDbExists)
          {
            Write-Output "SQL Database ${{ env.sqldbName }} already exists."
          }
          else
          {
            Write-Output "SQL Database ${{ env.sqldbName }} does not exist. Creating..."
            az sql db create --resource-group ${{ env.rgName }} --server ${{ env.sqlserverName }} --name ${{ env.sqldbName }}
          }

      # NOTA: não sei porq mas o bicep não esta criando uma webapp para asp net mvc 4.8
      #- name: Deploy Infrastructure using Bicep
      #  run: |
      #    az deployment group create --resource-group ${{ env.rgName }} --template-file FabrikamFiber.IAC/main.bicep --parameters webAppName=${{ env.appName }}

  build:
    needs: iac
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Restore NuGet Packages
        run: nuget restore FabrikamFiber.CallCenter.sln

      - name: Build Solution
        run: msbuild FabrikamFiber.CallCenter.sln /p:Configuration=Release /p:Platform="Any CPU" /p:DeployOnBuild=true /p:WebPublishMethod=FileSystem /p:OutDir="${{ github.workspace }}\WebDeploy"

      - name: Run Tests
        run: |
          & "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\IDE\Extensions\TestPlatform\vstest.console.exe" "${{ github.workspace }}\WebDeploy\FabrikamFiber.Web.Tests.dll" /TestCaseFilter:"TestCategory=Required" /EnableCodeCoverage
      
      - name: Zip Published Website
        run: |
          Compress-Archive -Path "${{ github.workspace }}\WebDeploy\_PublishedWebsites\FabrikamFiber.Web\*" -DestinationPath "${{ github.workspace }}\WebDeploy\_PublishedWebsites\FabrikamFiber.Web.zip"

      - name: Archive WebDeploy
        uses: actions/upload-artifact@v4
        with:
          name: _PublishedWebsites
          path: ${{ github.workspace }}\WebDeploy\_PublishedWebsites\FabrikamFiber.Web.zip

      - name: Archive DacPac
        uses: actions/upload-artifact@v4
        with:
          name: DacPac
          path: ${{ github.workspace }}\WebDeploy\*.dacpac

  deploy_qa:
    needs: build
    runs-on: windows-latest
    environment: QA
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
      
      - name: View files
        run: |
          ls -R
      
      - name: Create Connection String
        run: |
          echo "DB_CONNECTION_STRING='Server=tcp:${{ env.sqlserverName }}.database.windows.net,1433;Initial Catalog=${{ env.sqldbName }};Persist Security Info=False;User ID=${{ secrets.SQL_USER }};Password=${{ secrets.SQL_PASSWORD }};MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;'" >> $GITHUB_ENV

      - name: View SQL Connection String
        run: |
          Write-Output "SQL Connection String = ${{ env.DB_CONNECTION_STRING }}"

      - name: Azure Login
        uses: Azure/login@v2
        with:
          creds: ${{ secrets.ORG_AZ_CREDENTIALS }}
      
      - name: Install SqlPackage
        run: |
          Invoke-WebRequest -Uri "https://aka.ms/sqlpackage-windows" -OutFile "sqlpackage.zip"
          Expand-Archive -Path "sqlpackage.zip" -DestinationPath "${{ github.workspace }}\sqlpackage"

      - name: Deploy DacPac to Azure SQL
        run: |
          & "${{ github.workspace }}\sqlpackage\SqlPackage.exe" /Action:Publish /SourceFile:"${{ github.workspace }}\DacPac\FabrikamFiber.Database.dacpac" /TargetConnectionString:"${{ env.DB_CONNECTION_STRING }}"

      - name: Deploy APP
        uses: azure/webapps-deploy@v3
        with:
          resource-group-name: ${{ env.rgName }}
          app-name: ${{ env.appName }}
          package: "_PublishedWebsites/FabrikamFiber.Web.zip"